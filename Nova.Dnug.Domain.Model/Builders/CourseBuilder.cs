namespace Nova.Dnug.Domain.Model.Builders
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Nova.Dnug.Domain.Model.Properties;

    /// <summary>
    /// Builder class for creating instances of the <see cref="Course"/> class
    /// </summary>
    public class CourseBuilder
    {
        /// <summary>
        /// An instance of <see cref="Random"/> to ensure the contents of the <see cref="Course"/> instances
        /// generated by the <see cref="CourseBuilder"/> contain random property values
        /// </summary>
        private readonly Random random;

        /// <summary>
        /// A preloaded collection of course names from the resources text file
        /// </summary>
        private readonly IEnumerable<string> courses;

        /// <summary>
        /// Embedded instance of <see cref="StudentBuilder"/> to create random instances of <see cref="Student"/> registered for the course
        /// </summary>
        private readonly StudentBuilder studentBuilder;

        /// <summary>
        /// Initializes a new instance of the <see cref="CourseBuilder"/> class.
        /// </summary>
        public CourseBuilder()
        {
            this.random = new Random();
            this.courses = Resources.Courses.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
            this.studentBuilder = new StudentBuilder();
        }

        /// <summary>
        /// Builds a randomly generated instance of the <see cref="Course"/> entity
        /// </summary>
        /// <param name="complexity">
        /// The value of the complexity of the <see cref="Course"/> to create
        /// </param>
        /// <returns>
        /// A randomly generated <see cref="Course"/> instance
        /// </returns>
        public Course Build(int complexity)
        {
            return new Course
                {
                    Id = Guid.NewGuid(),
                    Code = this.random.Next(10000, 99999),
                    Description = this.courses.Take(this.random.Next(1, this.courses.Count() - 1)).Reverse().First(),
                    StartDate = DateTime.Today.AddDays(this.random.Next(1, 100)),
                    EndDate = DateTime.Today.AddDays(this.random.Next(100, 600)),
                    RegisteredStudents = Enumerable.Range(0, complexity).Select(x => this.studentBuilder.Build()).ToList()
                };
        }
    }
}
