namespace Nova.Dnug.Domain.Model.Builders
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Nova.Dnug.Domain.Model.Properties;

    /// <summary>
    /// Builder class for creating instances of the <see cref="Faculty"/> class
    /// </summary>
    public class FacultyBuilder
    {
        /// <summary>
        /// An instance of <see cref="Random"/> to ensure the contents of the <see cref="Faculty"/> instances
        /// generated by the <see cref="FacultyBuilder"/> contain random property values
        /// </summary>
        private readonly Random random;

        /// <summary>
        /// A preloaded collection of faculties names from the resources text file
        /// </summary>
        private readonly IEnumerable<string> faculties;

        /// <summary>
        /// Embedded instance of <see cref="AddressBuilder"/> to create a random instances of <see cref="Address"/>
        /// </summary>
        private readonly AddressBuilder addressBuilder;

        /// <summary>
        /// Embedded instance of <see cref="CourseBuilder"/> to create random instances of <see cref="Course"/>s offered by the faculty
        /// </summary>
        private readonly CourseBuilder courseBuilder;

        /// <summary>
        /// Initializes a new instance of the <see cref="FacultyBuilder"/> class.
        /// </summary>
        public FacultyBuilder()
        {
            this.random = new Random();
            this.faculties = Resources.Faculties.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
            this.addressBuilder = new AddressBuilder();
            this.courseBuilder = new CourseBuilder();
        }

        /// <summary>
        /// Builds a randomly generated instance of the <see cref="Faculty"/> entity
        /// </summary>
        /// <param name="complexity">
        /// The value of the complexity of the <see cref="Faculty"/> to create
        /// </param>
        /// <returns>
        /// A randomly generated <see cref="Faculty"/> instance
        /// </returns>
        public Faculty Build(int complexity)
        {
            return new Faculty
                {
                    Id = Guid.NewGuid(),
                    Name = this.faculties.Take(this.random.Next(1, this.faculties.Count() - 1)).Reverse().First(),
                    CoursesOffered = Enumerable.Range(0, complexity).Select(x => this.courseBuilder.Build(complexity)).ToList(),
                    Address = this.addressBuilder.Build()
                };
        }
    }
}
