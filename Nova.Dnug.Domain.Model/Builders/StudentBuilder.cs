namespace Nova.Dnug.Domain.Model.Builders
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Nova.Dnug.Domain.Model.Properties;

    /// <summary>
    /// Builder class for creating instances of the <see cref="Student"/> class
    /// </summary>
    public class StudentBuilder
    {
        /// <summary>
        /// An instance of <see cref="Random"/> to ensure the contents of the <see cref="Student"/> instances
        /// generated by the <see cref="StudentBuilder"/> contain random property values
        /// </summary>
        private readonly Random random;

        /// <summary>
        /// A preloaded collection of forenames from the resources text file
        /// </summary>
        private readonly IEnumerable<string> forenames;

        /// <summary>
        /// A preloaded collection of surnames from the resources text file
        /// </summary>
        private readonly IEnumerable<string> surnames;

        /// <summary>
        /// Embedded instance of <see cref="AddressBuilder"/> to create a random instances of <see cref="Address"/>
        /// </summary>
        private readonly AddressBuilder addressBuilder;

        /// <summary>
        /// Initializes a new instance of the <see cref="StudentBuilder"/> class.
        /// </summary>
        public StudentBuilder()
        {
            this.random = new Random();
            this.forenames = Resources.Forenames.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
            this.surnames = Resources.Surnames.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
            this.addressBuilder = new AddressBuilder();
        }

        /// <summary>
        /// Builds a randomly generated instance of the <see cref="Student"/> entity
        /// </summary>
        /// <returns>
        /// A randomly generated <see cref="Student"/> instance
        /// </returns>
        public Student Build()
        {
            return new Student
                {
                    Id = Guid.NewGuid(),
                    Forename = this.forenames.Take(this.random.Next(1, this.forenames.Count() - 1)).Reverse().First(),
                    Surname = this.surnames.Take(this.random.Next(1, this.forenames.Count() - 1)).Reverse().First(),
                    Address = this.addressBuilder.Build(),
                    StudentNumber = Guid.NewGuid(),
                    DateOfBirth = new DateTime(1980, 1, 1).AddDays(this.random.Next(0, 300))
                };
        }

        /// <summary>
        /// The a collection of random forenames of a specified size
        /// </summary>
        /// <param name="count">
        /// The number of forenames to load
        /// </param>
        /// <returns>
        /// A collection of forenames with a count of <see cref="count"/>
        /// </returns>
        public IEnumerable<string> GetForenames(int count)
        {
            var countedNames = new List<string>();
            
            while (countedNames.Count < count)
            {
                countedNames.AddRange(this.forenames);
            }

            return countedNames.Take(count);
        }
    }
}
